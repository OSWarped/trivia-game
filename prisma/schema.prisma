generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique @db.Citext
  password        String
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  roles           String[]
  Notification    Notification[]
  SiteMembership  SiteMembership[]
  captainedTeams  Team[]            @relation("Captain")
  TeamJoinRequest TeamJoinRequest[]
  memberships     TeamMembership[]
  LobbySession    LobbySession?
}

model Team {
  id                 String              @id @default(uuid())
  name               String
  captainId          String?
  score              Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  remainingPoints    Int[]
  answers            Answer[]
  subQuestionAnswers SubQuestionAnswer[]
  captain            User?               @relation("Captain", fields: [captainId], references: [id])
  teamGames          TeamGame[]
  TeamHostingSite    TeamHostingSite[]
  TeamJoinRequest    TeamJoinRequest[]
  memberships        TeamMembership[]
  hostingSites       HostingSite[]       @relation("TeamHostingSites")
}

model TeamMembership {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  status    String   @default("ACTIVE")
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, teamId])
}

model HostingSite {
  id              String            @id @default(uuid())
  name            String            @unique
  location        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  games           Game[]
  SiteMembership  SiteMembership[]
  TeamHostingSite TeamHostingSite[]
  teams           Team[]            @relation("TeamHostingSites")
}

model TeamHostingSite {
  id            String      @id @default(uuid())
  teamId        String
  hostingSiteId String
  hostingSite   HostingSite @relation(fields: [hostingSiteId], references: [id])
  team          Team        @relation(fields: [teamId], references: [id])

  @@unique([teamId, hostingSiteId])
}

model TeamGame {
  id        String   @id @default(uuid())
  teamId    String
  gameId    String
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, gameId])
}

model Game {
  id            String         @id @default(uuid())
  hostingSiteId String
  date          DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  hostId        String
  name          String
  startedAt     DateTime?
  status        String         @default("PENDING")
  hostingSite   HostingSite    @relation(fields: [hostingSiteId], references: [id])
  gameState     GameState?
  rounds        Round[]
  teamGames     TeamGame[]
  LobbySession  LobbySession[]
}

model GameState {
  id                     String   @id @default(uuid())
  gameId                 String   @unique
  currentRoundId         String?
  currentQuestionId      String?
  updatedAt              DateTime @updatedAt
  createdAt              DateTime @default(now())
  adEmbedCode            String?
  isTransitioning        Boolean  @default(false)
  transitionMedia        String?
  transitionMessage      String?
  scoresVisibleToPlayers Boolean  @default(false)
  pointPool              Int[]
  pointsRemaining        Json?
  game                   Game     @relation(fields: [gameId], references: [id])
}

model Round {
  id          String      @id @default(uuid())
  gameId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  maxPoints   Int?
  roundType   RoundType
  timeLimit   Int?
  wagerLimit  Int?
  name        String
  pointSystem PointSystem
  pointPool   Int[]
  pointValue  Int?
  sortOrder   Int
  questions   Question[]
  game        Game        @relation(fields: [gameId], references: [id])
}

model Question {
  id            String         @id @default(uuid())
  text          String
  type          QuestionType
  pointValue    Int?
  roundId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  answers       Answer[]
  correctAnswer CorrectAnswer?
  round         Round          @relation(fields: [roundId], references: [id])
  sortOrder     Int            @default(0) // Field for defining the question's order
  subquestions  Subquestion[]
}

model Answer {
  id            String   @id @default(uuid())
  questionId    String
  teamId        String
  answer        String
  isCorrect     Boolean? // Nullable to indicate it hasn't been marked yet
  pointsAwarded Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  pointsUsed    Int
  question      Question @relation(fields: [questionId], references: [id])
  team          Team     @relation(fields: [teamId], references: [id])
}

model Subquestion {
  id            String              @id @default(uuid())
  questionId    String
  text          String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  correctAnswer CorrectSubquestion?
  question      Question            @relation(fields: [questionId], references: [id])
  subAnswers    SubQuestionAnswer[] // One-to-many relation with SubQuestionAnswer
}

model SubQuestionAnswer {
  id            String      @id @default(uuid())
  subquestionId String
  teamId        String
  answer        String
  isCorrect     Boolean? // Nullable to indicate it hasn't been marked yet
  pointsAwarded Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subquestion   Subquestion @relation(fields: [subquestionId], references: [id])
  team          Team        @relation(fields: [teamId], references: [id])
}

model CorrectAnswer {
  id         String   @id @default(uuid())
  answer     String
  questionId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id])
}

model CorrectSubquestion {
  id            String      @id @default(uuid())
  answer        String
  subquestionId String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subquestion   Subquestion @relation(fields: [subquestionId], references: [id])
}

model SiteMembership {
  id            String      @id @default(uuid())
  userId        String
  hostingSiteId String
  createdAt     DateTime    @default(now())
  hostingSite   HostingSite @relation(fields: [hostingSiteId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, hostingSiteId])
}

model TeamJoinRequest {
  id          String    @id @default(uuid())
  userId      String
  teamId      String
  status      String    @default("PENDING")
  requestedAt DateTime  @default(now())
  approvedBy  String?
  approvedAt  DateTime?
  team        Team      @relation(fields: [teamId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, teamId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model LobbySession {
  id        String   @id @default(uuid())
  gameId    String
  captainId String   @unique
  createdAt DateTime @default(now())

  game    Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  captain User @relation(fields: [captainId], references: [id], onDelete: Cascade)

  @@unique([gameId, captainId]) // Ensure each captain can only join once per game
}

enum GameMode {
  TIME_BASED
  POINT_ASSIGNMENT
  COMBO
}

enum RoundType {
  POINT_BASED
  TIME_BASED
  WAGER
  LIGHTNING
  IMAGE
}

enum PointSystem {
  POOL
  FLAT
}

enum QuestionType {
  SINGLE
  MULTIPLE_CHOICE
  ORDERED
  WAGER
  IMAGE
}
