// ----------  Generators / datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// ----------  Auth / staff ----------
model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.Citext
  name      String
  hashedPw  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hostedGames Game[] @relation("HostGames")
}

enum UserRole {
  ADMIN
  HOST
  USER
}

// ----------  Venue hierarchy ----------
model Site {
  id        String   @id @default(uuid())
  name      String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  games    Game[] // convenience if you ever need site‑wide history
  TeamGame TeamGame[]
  Event    Event[]
}

model Event {
  id        String   @id @default(uuid())
  siteId    String
  name      String // “Thursday Trivia” or “Murky Waters Trivia”
  createdAt DateTime @default(now())

  /**
   * relations
   */
  site       Site            @relation(fields: [siteId], references: [id])
  schedules  EventSchedule[] // one or more rows (see below)
  seasons    Season[]
  games      Game[]
  teamEvents TeamEvent[]
}

model EventSchedule {
  id         String       @id @default(uuid())
  eventId    String
  freq       ScheduleFreq // WEEKLY | BIWEEKLY | MONTHLY
  /**
   * WEEKLY / BIWEEKLY
   */
  dow        Int? // 0‑6 (Sun=0)
  /**
   * MONTHLY options — use one of the two:
   */
  nthDow     Int? // 1‑5  (e.g., 1st Fri)
  dayOfMonth Int? // 1‑31 (e.g., 15th)
  timeUTC    String // "19:00"

  event Event @relation(fields: [eventId], references: [id])

  @@unique([eventId, freq, dow, nthDow, dayOfMonth, timeUTC])
}

enum ScheduleFreq {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model Season {
  id             String    @id @default(uuid())
  eventId        String // ← NEW
  name           String
  startsAt       DateTime  @default(now())
  endsAt         DateTime?
  recurring      Boolean   @default(false)
  active         Boolean   @default(true)
  championGameId String?

  event Event  @relation(fields: [eventId], references: [id]) // ← NEW
  games Game[]
}

model Game {
  id        String     @id @default(uuid())
  eventId   String
  seasonId  String?
  hostId    String?
  title     String
  joinCode  String     @unique
  special   Boolean    @default(false) // <- NEW
  tag       String? // <- optional label (“Championship”)
  status    GameStatus @default(DRAFT)
  startedAt DateTime?
  endedAt   DateTime?
  createdAt DateTime   @default(now())

  event  Event   @relation(fields: [eventId], references: [id])
  season Season? @relation(fields: [seasonId], references: [id])
  host   User?   @relation("HostGames", fields: [hostId], references: [id])

  gameState GameState?

  scheduledFor DateTime? // ← when this session is scheduled

  rounds    Round[] // <- NEW back‑relation
  teamGames TeamGame[]
  Site      Site?      @relation(fields: [siteId], references: [id])
  siteId    String?
}

enum GameStatus {
  DRAFT // host building questions / waiting room
  LIVE // accepting answers
  CLOSED // finished, scores frozen
}

model GameState {
  gameId             String    @id
  game               Game      @relation(fields: [gameId], references: [id])
  currentRoundId     String?
  currentQuestionId  String?
  pointsRemaining    Json // { teamId1: [10, 5], teamId2: [10, 5] }
  questionStartedAt  DateTime?
  isAcceptingAnswers Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Question {
  id        String       @id @default(uuid())
  roundId   String
  text      String
  type      QuestionType @default(SINGLE)
  sortOrder Int

  round   Round    @relation(fields: [roundId], references: [id])
  options Option[]
  answers Answer[]
}

enum QuestionType {
  SINGLE
  MULTIPLE_CHOICE
  ORDERED
  WAGER
  LIST
}

model Team {
  id        String   @id @default(uuid())
  name      String
  pin       String // 4–6 digit user-entered or generated PIN
  createdAt DateTime @default(now())

  teamEvents TeamEvent[]
  teamGames  TeamGame[]

  @@unique([name, pin]) // this pair defines a reusable identity
}

model TeamEvent {
  id       String @id @default(uuid())
  teamId   String
  eventId  String
  teamName String // redundant, but needed for uniqueness

  team  Team  @relation(fields: [teamId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([eventId, teamId])
  @@unique([eventId, teamName])
}

model TeamGame {
  id       String @id @default(uuid())
  teamId   String
  siteId   String // denormalised for quick look‑ups
  gameId   String
  totalPts Int    @default(0)
  rank     Int?

  team Team @relation(fields: [teamId], references: [id]) // now has opposite
  game Game @relation(fields: [gameId], references: [id])
  site Site @relation(fields: [siteId], references: [id])

  answers Answer[]

  @@unique([teamId, gameId])
}

/// ----------  ENUMS (reuse the ones you still need) ----------
enum RoundType {
  POINT_BASED
  TIME_BASED
  WAGER
  LIGHTNING
  IMAGE
}

enum PointSystem {
  POOL // teams draw from a pool of points
  FLAT // each correct answer worth `pointValue`
}

/// ----------  NEW Round model ----------
model Round {
  id        String   @id @default(uuid())
  gameId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /**
   * ─── round config ───
   */
  name        String
  roundType   RoundType
  pointSystem PointSystem
  maxPoints   Int? // used with POOL systems
  pointValue  Int? // used with FLAT systems
  pointPool   Int[] // optional per‑question point buckets
  timeLimit   Int? // seconds; TIME_BASED
  wagerLimit  Int? // WAGER rounds
  sortOrder   Int

  /**
   * ─── relations ───
   */
  game      Game       @relation(fields: [gameId], references: [id])
  questions Question[]
}

model Answer {
  id            String       @id @default(uuid())
  teamGameId    String
  questionId    String
  given         String
  isCorrect     Boolean? // null until host scores
  awardedPoints Int          @default(0)
  pointsUsed    Int?
  createdAt     DateTime     @default(now())
  favorite      Boolean      @default(false)
  items         AnswerItem[] // ← new relation

  teamGame TeamGame @relation(fields: [teamGameId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
}

model Option {
  id         String  @id @default(uuid())
  questionId String
  text       String
  isCorrect  Boolean
  sortOrder  Int?

  //Relation back to Question
  question Question @relation(fields: [questionId], references: [id])
}

model AnswerItem {
  id        String   @id @default(uuid())
  answerId  String
  submitted String // the one item they named
  isCorrect Boolean? // null until host scores
  awarded   Int // awardedPoints for this item (round.pointValue or 0)
  answer    Answer   @relation(fields: [answerId], references: [id])
}
